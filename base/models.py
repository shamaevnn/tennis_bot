from __future__ import annotations

import logging
import random
import re
from typing import Optional, Tuple, Union, Iterator
from uuid import uuid4

import telegram
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.db.models import (
    Q,
    F,
    Case,
    When,
    Sum,
    IntegerField,
    QuerySet,
)
from django.utils import timezone
from datetime import datetime, date, timedelta

from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from telegram import Update, Bot, ParseMode
from telegram.ext import CallbackContext

from base.utils.db_managers import GetOrNoneManager, CoachPlayerManager
from base.utils.models import ModelwithTime, nb
from base.utils.telegram import extract_user_data_from_update
from tennis_bot.settings import (
    TARIF_ARBITRARY,
    TARIF_GROUP,
    TARIF_IND,
    TARIF_SECTION,
    TARIF_FEW,
    TELEGRAM_TOKEN,
    ADMIN_CHAT_ID,
    HOST,
)


class User(AbstractUser):
    """–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏–Ω–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""

    id = models.AutoField(
        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
    )
    first_name = models.CharField(max_length=32, **nb, verbose_name="–ò–º—è")

    def __str__(self):
        return self.get_full_name()


class Player(models.Model):
    STATUS_WAITING = "W"
    STATUS_TRAINING = "G"
    STATUS_FINISHED = "F"
    STATUS_ARBITRARY = "A"
    STATUS_IND_TRAIN = "I"
    STATUSES = (
        (STATUS_WAITING, "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏"),
        (STATUS_TRAINING, "–≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"),
        (STATUS_ARBITRARY, "—Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"),
        (STATUS_FINISHED, "–∑–∞–∫–æ–Ω—á–∏–ª"),
    )

    id = models.UUIDField(primary_key=True, unique=True, default=uuid4)

    first_name = models.CharField(max_length=32, null=True, verbose_name="–ò–º—è")
    last_name = models.CharField(max_length=32, null=True, verbose_name="–§–∞–º–∏–ª–∏—è")
    phone_number = models.CharField(
        max_length=16, null=True, verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    )
    parent = models.ForeignKey(
        "self",
        on_delete=models.PROTECT,
        verbose_name="–†–æ–¥–∏—Ç–µ–ª—å",
        related_name="children",
        **nb,
    )

    tg_id = models.PositiveBigIntegerField(verbose_name="telegram id", **nb)
    tg_username = models.CharField(max_length=64, **nb)
    has_blocked_bot = models.BooleanField(
        default=False, verbose_name="–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
    )
    deep_link = models.CharField(max_length=64, **nb)

    status = models.CharField(
        max_length=1, choices=STATUSES, default=STATUS_WAITING, verbose_name="—Å—Ç–∞—Ç—É—Å"
    )
    time_before_cancel = models.DurationField(
        null=True,
        help_text="–ß–ê–°–´:–ú–ò–ù–£–¢–´:–°–ï–ö–£–ù–î–´",
        verbose_name="–í—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å",
        default=timedelta(hours=6),
    )
    bonus_lesson = models.SmallIntegerField(
        default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—ã–≥—Ä—ã—à–µ–π"
    )
    max_lessons_for_bonus_in_future = models.PositiveSmallIntegerField(
        default=3, verbose_name="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –æ—Ç—ã–≥—Ä—ã—à–∏"
    )
    is_coach = models.BooleanField(default=False, verbose_name="–¢—Ä–µ–Ω–µ—Ä –ª–∏")

    objects = GetOrNoneManager()
    coaches = CoachPlayerManager()

    class Meta:
        verbose_name = "–∏–≥—Ä–æ–∫"
        verbose_name_plural = "–∏–≥—Ä–æ–∫–∏"

    def __str__(self):
        return "{} {} -- {}".format(self.first_name, self.last_name, self.phone_number)

    @property
    def tg_name(self) -> str:
        return f"@{self.tg_username}" if self.tg_username else f"{self.tg_id}"

    @property
    def get_link_to_django_admin(self) -> str:
        return f"{HOST}player/{self.id}/change/"

    def count_not_self_group_trainings_in_future(self):
        """
        –°—á–∏—Ç–∞–µ–º –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∞–ª—Å—è –∏–≥—Ä–æ–∫ –≤ –±—É–¥—É—â–µ–º –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É,
        –ª–∏–±–æ –∑–∞ –æ—Ç—ã–≥—Ä—ã—à–∏, –ª–∏–±–æ –∑–∞ –ø–ª–∞—Ç–Ω—ã–µ –æ—Ç—ã–≥—Ä—ã—à–∏
        """
        return GroupTrainingDay.objects.filter(
            Q(visitors__in=[self])
            | Q(pay_visitors__in=[self])
            | Q(pay_bonus_visitors__in=[self]),
            date__gte=datetime.now(),
        ).count()

    @classmethod
    def from_update(cls, update: Update) -> Optional[Player]:
        data = extract_user_data_from_update(update)
        tg_id = data["id"]
        player = cls.objects.get_or_none(tg_id=tg_id)
        return player

    @classmethod
    def get_player_and_created(
        cls, update: Update, context: CallbackContext
    ) -> Tuple[Player, bool]:
        """python-telegram-bot's Update, Context --> User instance"""
        data = extract_user_data_from_update(update)
        tg_id = data["id"]
        u, created = cls.objects.update_or_create(
            tg_id=tg_id,
            defaults={
                "tg_username": data["username"] if data.get("username") else None,
                "has_blocked_bot": data["is_blocked"],
            },
        )

        if created:
            if (
                context is not None
                and context.args is not None
                and len(context.args) > 0
            ):
                payload = context.args[0]
                if (
                    str(payload).strip() != str(tg_id).strip()
                ):  # you can't invite yourself
                    u.deep_link = payload
                    u.save()
        return u, created

    @classmethod
    def get_tarif_by_status(cls, status: str) -> int:
        tarif_by_status = {
            cls.STATUS_TRAINING: TARIF_GROUP,
            cls.STATUS_ARBITRARY: TARIF_ARBITRARY,
            cls.STATUS_IND_TRAIN: TARIF_IND,
        }
        return tarif_by_status[status]


class TrainingGroup(ModelwithTime):
    STATUS_RENT = "R"
    STATUS_4IND = "I"
    STATUS_GROUP = "G"
    STATUS_FEW = "F"
    STATUS_SECTION = "S"
    GROUP_STATUSES = (
        (STATUS_4IND, "–¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"),
        (STATUS_RENT, "–¥–ª—è –∞—Ä–µ–Ω–¥—ã –∫–æ—Ä—Ç–∞"),
        (STATUS_GROUP, "–≤–∑—Ä–æ—Å–ª—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"),
        (STATUS_FEW, "–¥–µ—Ç—Å–∫–∞—è –≥—Ä—É–ø–ø–∞ –º–∞–ª–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏"),
        (STATUS_SECTION, "–¥–µ—Ç—Å–∫–∞—è —Å–µ–∫—Ü–∏—è"),
    )

    LEVEL_ORANGE = "O"
    LEVEL_GREEN = "G"
    GROUP_LEVEL_DICT = {LEVEL_ORANGE: "üü†–æ—Ä–∞–Ω–∂–µ–≤—ã–π –º—è—áüü†", LEVEL_GREEN: "üü¢–∑–µ–ª—ë–Ω—ã–π –º—è—áüü¢"}
    GROUP_LEVELS = (
        (LEVEL_GREEN, GROUP_LEVEL_DICT[LEVEL_GREEN]),
        (LEVEL_ORANGE, GROUP_LEVEL_DICT[LEVEL_ORANGE]),
    )

    name = models.CharField(max_length=32, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    players = models.ManyToManyField(Player, verbose_name="–ò–≥—Ä–æ–∫–∏ –≥—Ä—É–ø–ø—ã")
    max_players = models.SmallIntegerField(default=6, verbose_name="–ú–∞–∫—Å. –∏–≥—Ä–æ–∫–æ–≤")
    status = models.CharField(
        max_length=1,
        choices=GROUP_STATUSES,
        verbose_name="–°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã",
        default=STATUS_GROUP,
    )
    level = models.CharField(
        max_length=1,
        choices=GROUP_LEVELS,
        verbose_name="–£—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã",
        default=LEVEL_ORANGE,
    )
    tarif_for_one_lesson = models.PositiveIntegerField(
        default=400, verbose_name="–¢–∞—Ä–∏—Ñ –∑–∞ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ"
    )
    available_for_additional_lessons = models.BooleanField(
        default=False,
        verbose_name="–ó–∞–Ω—è—Ç–∏—è –∑–∞ –¥–µ–Ω—å–≥–∏",
        help_text="–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–π—Ç–∏ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É –Ω–∞ –∑–∞–Ω—è—Ç–∏—è –∑–∞ –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ, —á–µ–º max_players",
    )
    order = models.PositiveSmallIntegerField(default=0, blank=True)

    class Meta:
        verbose_name = "–±–∞–Ω–¥–∞"
        verbose_name_plural = "–±–∞–Ω–¥—ã"

    def __str__(self):
        return "{}, max_players: {}".format(self.name, self.max_players)

    @classmethod
    def get_banda_groups(cls) -> QuerySet[TrainingGroup]:
        banda_groups = TrainingGroup.objects.filter(
            status=TrainingGroup.STATUS_GROUP,
            max_players__gt=1,
            name__iregex=r"–ë–ê–ù–î–ê",
        ).order_by("order")
        return banda_groups

    @classmethod
    def _get_or_create_ind_or_rent_group(
        cls, player: Player, status: str
    ) -> TrainingGroup:
        assert status in (cls.STATUS_RENT, cls.STATUS_4IND)
        group, _ = cls.objects.get_or_create(
            name=f"{player.first_name}{player.last_name}", status=status, max_players=1
        )
        if player not in group.players.all():
            group.players.add(player)
        return group

    @classmethod
    def get_or_create_ind_group(cls, player: Player) -> TrainingGroup:
        return cls._get_or_create_ind_or_rent_group(player, status=cls.STATUS_4IND)

    @classmethod
    def get_or_create_rent_group(cls, player: Player) -> TrainingGroup:
        return cls._get_or_create_ind_or_rent_group(player, status=cls.STATUS_RENT)

    def save(self, *args, **kwargs):
        # –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ë–ê–ù–î–ê ‚Ññ10 –±—ã–ª–∞ –ø–æ–∑–∂–µ –ë–ê–ù–î–ê ‚Ññ1
        number_in_name = re.findall(r"\d+", self.name)
        if len(number_in_name) == 1:
            self.order = number_in_name[0]
        super(TrainingGroup, self).save(*args, **kwargs)


class GroupTrainingDay(ModelwithTime):
    GROUP_ADULT_TRAIN = "M"
    INDIVIDUAL_TRAIN = "I"
    RENT_COURT_STATUS = "R"

    TR_DAY_STATUSES = (
        (GROUP_ADULT_TRAIN, "–≥—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö"),
        (INDIVIDUAL_TRAIN, "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"),
        (RENT_COURT_STATUS, "–∞—Ä–µ–Ω–¥–∞ –∫–æ—Ä—Ç–∞"),
    )

    group = models.ForeignKey(
        TrainingGroup, on_delete=models.PROTECT, verbose_name="–ì—Ä—É–ø–ø–∞"
    )
    date = models.DateField(default=timezone.now, verbose_name="–î–∞—Ç–∞ –ó–∞–Ω—è—Ç–∏—è")
    is_available = models.BooleanField(
        default=True,
        help_text="–ë—É–¥–µ—Ç –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã",
        verbose_name="–î–æ—Å—Ç—É–ø–Ω–æ",
    )
    start_time = models.TimeField(
        null=True, help_text="–ß–ê–°–´:–ú–ò–ù–£–¢–´:–°–ï–ö–£–ù–î–´", verbose_name="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è"
    )
    duration = models.DurationField(
        null=True,
        default=timedelta(hours=1),
        help_text="–ß–ê–°–´:–ú–ò–ù–£–¢–´:–°–ï–ö–£–ù–î–´",
        verbose_name="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è",
    )

    absent = models.ManyToManyField(
        Player,
        blank=True,
        help_text="–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        verbose_name="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ",
    )

    visitors = models.ManyToManyField(
        Player,
        blank=True,
        help_text="–ü—Ä–∏—à–ª–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø\n",
        related_name="visitors",
        verbose_name="–ò–≥—Ä–æ–∫–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø",
    )

    pay_visitors = models.ManyToManyField(
        Player,
        blank=True,
        help_text="–ó–∞–ø–ª–∞—Ç–∏–ª–∏ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ",
        related_name="pay_visitors",
        verbose_name="–ó–∞–ø–ª–∞—Ç–∏–≤—à–∏–µ –∏–≥—Ä–æ–∫–∏",
    )

    pay_bonus_visitors = models.ManyToManyField(
        Player,
        blank=True,
        help_text="–ü–ª–∞—Ç–Ω—ã–π –æ—Ç—ã–≥—Ä—ã—à",
        related_name="pay_bonus_visitors",
        verbose_name="–ó–∞–ø–ª–∞—Ç–∏–ª–∏ ‚ÇΩ + –æ—Ç—ã–≥—Ä—ã—à",
    )

    status = models.CharField(
        max_length=1,
        default=GROUP_ADULT_TRAIN,
        help_text="–ú–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞",
        choices=TR_DAY_STATUSES,
        verbose_name="–°—Ç–∞—Ç—É—Å",
    )
    is_deleted = models.BooleanField(default=False)

    class Meta:
        ordering = ["-date"]
        verbose_name = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å"
        verbose_name_plural = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–Ω–∏"

    def __str__(self):
        return "–ì—Ä—É–ø–ø–∞: {}, –¥–∞—Ç–∞ {}, –Ω–∞—á–∞–ª–æ –≤: {}".format(
            self.group, self.date, self.start_time
        )

    @property
    def start_dttm(self):
        return datetime.combine(self.date, self.start_time)

    @classmethod
    def get_tr_days_for_alerting_about_coming_train(cls) -> Iterator[GroupTrainingDay]:
        HOURS_BETWEEN_NOW_AND_COMING_TRAINING = 5
        now = datetime.now()
        available_tr_days: QuerySet[GroupTrainingDay] = (
            cls.objects.select_related("group")
            .prefetch_related(
                "absent", "visitors", "pay_visitors", "pay_bonus_visitors"
            )
            .filter(is_available=True)
        )
        for tr_day in available_tr_days.iterator():
            if tr_day.start_dttm > now and tr_day.start_dttm - now < timedelta(
                hours=HOURS_BETWEEN_NOW_AND_COMING_TRAINING
            ):
                yield tr_day

    def create_tr_days_for_future(self):
        NUMBER_OF_WEEKS_IN_2_MONTHS = 8
        NUMBER_OF_WEEKS_IN_SEASON = 26  # 6 –º–µ—Å—è—Ü–µ–≤

        period = (
            NUMBER_OF_WEEKS_IN_2_MONTHS
            if self.group.status
            in (TrainingGroup.STATUS_4IND, TrainingGroup.STATUS_RENT)
            else NUMBER_OF_WEEKS_IN_SEASON
        )
        init_date = self.date + timedelta(days=7)
        instances = []
        for _ in range(period):
            instances.append(
                GroupTrainingDay(
                    group=self.group,
                    date=init_date,
                    start_time=self.start_time,
                    duration=self.duration,
                    status=self.status,
                )
            )
            init_date += timedelta(days=7)

        print(instances)
        GroupTrainingDay.objects.bulk_create(instances)


class Payment(models.Model):
    JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER = (
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
    )
    OCTOBER, NOVEMBER, DECEMBER = "10", "11", "12"

    MONTHS = (
        (JANUARY, "—è–Ω–≤–∞—Ä—å"),
        (FEBRUARY, "—Ñ–µ–≤—Ä–∞–ª—å"),
        (MARCH, "–º–∞—Ä—Ç"),
        (APRIL, "–∞–ø—Ä–µ–ª—å"),
        (MAY, "–º–∞–π"),
        (JUNE, "–∏—é–Ω—å"),
        (JULY, "–∏—é–ª—å"),
        (AUGUST, "–∞–≤–≥—É—Å—Ç"),
        (SEPTEMBER, "—Å–µ–Ω—Ç—è–±—Ä—å"),
        (OCTOBER, "–æ–∫—Ç—è–±—Ä—å"),
        (NOVEMBER, "–Ω–æ—è–±—Ä—å"),
        (DECEMBER, "–¥–µ–∫–∞–±—Ä—å"),
    )

    YEAR_2020 = "0"
    YEAR_2021 = "1"
    YEAR_2022 = "2"
    YEAR_2023 = "3"

    YEARS = ((YEAR_2020, "2020"), (YEAR_2021, "2021"), (YEAR_2022, "2022"), (YEAR_2023, "2023"))

    player = models.ForeignKey(
        Player, on_delete=models.SET_NULL, verbose_name="–∏–≥—Ä–æ–∫", null=True
    )
    month = models.CharField(max_length=2, choices=MONTHS, verbose_name="–º–µ—Å—è—Ü")
    year = models.CharField(max_length=1, choices=YEARS, verbose_name="–≥–æ–¥")
    fact_amount = models.PositiveIntegerField(
        verbose_name="–°–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª", null=True, default=0
    )
    theory_amount = models.PositiveIntegerField(
        verbose_name="–°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–ø–ª–∞—Ç–∏—Ç—å", null=True, default=0
    )
    n_fact_visiting = models.PositiveSmallIntegerField(
        verbose_name="–ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π", null=True, default=0
    )

    class Meta:
        ordering = ["year"]
        verbose_name = "–æ–ø–ª–∞—Ç–∞"
        verbose_name_plural = "–æ–ø–ª–∞—Ç–∞"

    def save(self, *args, **kwargs):
        """
        –ü–æ–¥—Å—á–∏—Ç–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–µ–æ—Ä–∏—Ç–µ—á–µ—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∏–≥—Ä–æ–∫.
        –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏—è –∏ –ø—Ä–æ–ø—É—Å–∫–∏
        """
        year = int(self.year) + 2020
        month = int(self.month)
        begin_day_month = date(year, month, 1)

        # —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
        # —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª, –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è
        base_query = GroupTrainingDay.objects.filter(
            Q(visitors__in=[self.player]) | Q(group__players__in=[self.player]),
            date__gte=begin_day_month,
            date__lte=datetime.now().date(),
            is_available=True,
            date__month=month,
        ).exclude(absent__in=[self.player])

        player_in_section = False
        for x in self.player.traininggroup_set.all().iterator():
            if x.status == TrainingGroup.STATUS_SECTION:
                player_in_section = True

        # –µ—Å–ª–∏ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤ —Å–µ–∫—Ü–∏–∏, —Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü
        # –∏–Ω–∞—á–µ —Å—É–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
        if player_in_section:
            payment_sum = TARIF_SECTION
        else:
            payment_sum = (
                base_query.annotate(gr_status=F("group__status"))
                .annotate(
                    tarif=Case(
                        When(gr_status=TrainingGroup.STATUS_4IND, then=TARIF_IND),
                        When(gr_status=TrainingGroup.STATUS_GROUP, then=TARIF_GROUP),
                        When(gr_status=TrainingGroup.STATUS_FEW, then=TARIF_FEW),
                        output_field=IntegerField(),
                    )
                )
                .distinct()
                .aggregate(sigma=Sum("tarif"))["sigma"]
            )

        self.n_fact_visiting = base_query.distinct().count()
        self.theory_amount = payment_sum
        super(Payment, self).save(*args, **kwargs)

    def __str__(self):
        return f"{self.player}, –º–µ—Å—è—Ü: {self.month}"


class AlertsLog(models.Model):
    COMING_TRAIN = "CT"
    CUSTOM_COACH_MESSAGE = "CM"
    SHOULD_PAY = "SP"

    ALERT_TYPES = (
        (COMING_TRAIN, "–ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"),
        (CUSTOM_COACH_MESSAGE, "—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞"),
        (SHOULD_PAY, "–Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –º–µ—Å—è—Ü"),
    )

    player = models.ForeignKey(Player, on_delete=models.SET_NULL, null=True)
    is_sent = models.BooleanField(default=False)
    dttm_sent = models.DateTimeField(auto_now_add=True)
    tr_day = models.ForeignKey(GroupTrainingDay, on_delete=models.SET_NULL, null=True)
    payment = models.ForeignKey(Payment, on_delete=models.SET_NULL, null=True)
    alert_type = models.CharField(
        max_length=2, choices=ALERT_TYPES, default=COMING_TRAIN
    )
    info = models.TextField(null=True)

    def __str__(self):
        return f"{self.player, self.tr_day}"


class Photo(models.Model):
    url = models.TextField(verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É", **nb)
    telegram_id = models.CharField(
        max_length=256, verbose_name="id –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞", **nb
    )
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", **nb)

    class Meta:
        verbose_name = "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"
        verbose_name_plural = "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"

    @staticmethod
    def get_random_photo(photos: QuerySet[Photo]) -> Photo:
        return random.choice(photos)

    def send_to_player(self, chat_id: Union[int, str], text: str, bot: Bot) -> bool:
        success = True
        try:
            bot.send_photo(
                chat_id=chat_id,
                photo=self.telegram_id,
                caption=text,
                parse_mode=ParseMode.HTML,
            )
        except Exception as e:
            success = False
            logging.error(
                f"Error while sending photo {self.telegram_id} to {chat_id}:\n{e}"
            )
        return success

    def save(self, **kwargs):
        if not self.telegram_id:
            bot = telegram.Bot(TELEGRAM_TOKEN)
            photo_message = bot.send_photo(
                ADMIN_CHAT_ID, photo=self.url, disable_notification=True
            ).to_dict()
            self.telegram_id = photo_message["photo"][-1]["file_id"]
        super().save(**kwargs)


"""—Ä–∞–∑–¥–µ–ª —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏, –≤ –æ—Ç–µ–¥–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ—à–ª–æ"""


@receiver(post_save, sender=GroupTrainingDay)
def create_training_days_for_next_two_months(sender, instance, created, **kwargs):
    """
    –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ instance GroupTrainingDay –∞–≤—Ç–æ–º–∞—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º
    –µ—â–µ —Ç–∞–∫–∏—Ö –∂–µ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 2 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º bulk_create, —Ç.–∫. –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏–º —Ä–µ–∫—É—Ä—Å–∏—é.
    """
    pass
    # if created:
    #     period = 8 if instance.group.status == TrainingGroup.STATUS_4IND else 24
    #     date = instance.date + timedelta(days=7)
    #     dates = [date]
    #     for _ in range(period):
    #         date += timedelta(days=7)
    #         dates.append(date)
    #     objs = [GroupTrainingDay(group=instance.group, date=dat, start_time=instance.start_time,
    #                              duration=instance.duration) for dat in dates]
    #     GroupTrainingDay.objects.bulk_create(objs)


@receiver(post_delete, sender=GroupTrainingDay)
def delete_training_days(sender, instance: GroupTrainingDay, **kwargs):
    """
    –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ instance GroupTrainingDay –∞–≤—Ç–æ–º–∞—Ç–æ–º —É–¥–∞–ª—è–µ–º
    –∑–∞–Ω—è—Ç–∏–µ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö –¥–∞—Ç.
    """
    GroupTrainingDay.objects.filter(
        group=instance.group,
        start_time=instance.start_time,
        duration=instance.duration,
        date__gt=instance.date,
    ).delete()


@receiver(post_save, sender=Player)
def create_group_for_arbitrary(sender, instance: Player, created, **kwargs):
    """
    –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç –ø–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É, —Ç–æ —Å–æ–∑–¥–∞–¥–∏–º
    –¥–ª—è –Ω–µ–≥–æ –≥—Ä—É–ø–ø—É, —Å–æ—Å—Ç–æ—è—é—â—É—é —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–≥–æ.
    """
    if instance.status == Player.STATUS_ARBITRARY:
        TrainingGroup.get_or_create_ind_group(instance)
