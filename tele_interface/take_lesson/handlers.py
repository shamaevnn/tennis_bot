import calendar
from datetime import datetime

from admin_bot.keyboard_utils import yes_no_permission4ind_train_keyboard
from admin_bot.static_text import GROUP_LEVEL_DICT, DATE_INFO
from base.models import User, TrainingGroup, GroupTrainingDay
from base.utils import bot_edit_message, moscow_datetime, DT_BOT_FORMAT, clear_broadcast_messages, \
    get_time_info_from_tr_day, get_actual_players_without_absent
from tele_interface.keyboard_utils import ind_group_type_training_keyboard, create_calendar, \
    ind_train_choose_duration_keyboard, take_lesson_back_keyboard, choose_type_of_payment_for_group_lesson_keyboard, \
    back_to_group_times_when_no_left_keyboard
from tele_interface.manage_data import SELECT_TRAINING_TYPE, CLNDR_ACTION_TAKE_GROUP, SELECT_DURATION_FOR_IND_TRAIN, \
    CLNDR_ACTION_TAKE_IND, SELECT_PRECISE_IND_TIME, SELECT_PRECISE_GROUP_TIME, CONFIRM_GROUP_LESSON, PAYMENT_VISITING, \
    PAYMENT_BONUS, PAYMENT_MONEY
from tele_interface.static_text import from_eng_to_rus_day_week
from tele_interface.take_lesson.utils import get_potential_days_for_group_training
from tele_interface.utils import check_status_decor
from tennis_bot.settings import ADMIN_TELEGRAM_TOKEN, TARIF_ARBITRARY, TARIF_GROUP, TARIF_PAYMENT_ADD_LESSON


@check_status_decor
def choose_type_of_training(update, context):
    markup = ind_group_type_training_keyboard()
    text = '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.'
    if update.callback_query:
        bot_edit_message(context.bot, text, update, markup)
    else:
        update.message.reply_text(
            text=text,
            reply_markup=markup
        )


@check_status_decor
def take_lesson(update, context):
    """–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    user, _ = User.get_user_and_created(update, context)
    tr_type = update.callback_query.data[len(SELECT_TRAINING_TYPE):]
    if tr_type == 'group':
        if user.bonus_lesson > 0:
            text = '–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏.\n' \
                   '<b>–ü–æ–∂–µ—Ä—Ç–≤—É–µ—à—å –æ–¥–Ω–∏–º –æ—Ç—ã–≥—Ä—ã—à–µ–º.</b>\n' \
                   '‚úÖ -- –¥–Ω–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.'
        else:
            text = '‚ö†Ô∏èATTENTION‚ö†Ô∏è\n' \
                   '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –æ—Ç—ã–≥—Ä—ã—à–µ–π.\n' \
                   '<b> –ó–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 600‚ÇΩ </b>\n' \
                   '‚úÖ -- –¥–Ω–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.'
        training_days = get_potential_days_for_group_training(user).filter(
            date__gte=moscow_datetime(datetime.now()).date())
        highlight_dates = list(training_days.values_list('date', flat=True))
        markup = create_calendar(CLNDR_ACTION_TAKE_GROUP, dates_to_highlight=highlight_dates)

    else:
        markup = ind_train_choose_duration_keyboard()
        text = '–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è'

    bot_edit_message(context.bot, text, update, markup)


def select_dt_for_ind_lesson(update, context):
    duration = float(update.callback_query.data[len(SELECT_DURATION_FOR_IND_TRAIN):])
    markup = create_calendar(f'{CLNDR_ACTION_TAKE_IND}{duration}')
    text = '–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.'
    bot_edit_message(context.bot, text, update, markup)


def select_precise_ind_lesson_time(update, context):
    day_dt, start_time, end_time = update.callback_query.data[len(SELECT_PRECISE_IND_TIME):].split('|')
    date_dt = datetime.strptime(day_dt, DT_BOT_FORMAT)
    st_time_obj = datetime.strptime(start_time, '%H:%M:%S')
    end_time_obj = datetime.strptime(end_time, '%H:%M:%S')
    duration = end_time_obj - st_time_obj

    day_of_week = from_eng_to_rus_day_week[calendar.day_name[date_dt.date().weekday()]]

    user, _ = User.get_user_and_created(update, context)
    group, _ = TrainingGroup.objects.get_or_create(name=user.first_name + user.last_name,
                                                   max_players=1)

    tr_day = GroupTrainingDay.objects.create(group=group, date=date_dt, start_time=st_time_obj, duration=duration,
                                             is_individual=True)

    text = f"–°–æ–æ–±—â—É —Ç—Ä–µ–Ω–µ—Ä—É, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–π—Ç–∏ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ"\
           f" <b>{day_dt} ({day_of_week}) </b>\n"\
           f"–í—Ä–µ–º—è: <b>{start_time} ‚Äî {end_time}</b>"
    bot_edit_message(context.bot, text, update)

    admins = User.objects.filter(is_staff=True, is_blocked=False)
    markup = yes_no_permission4ind_train_keyboard(
        user_id=user.id,
        tr_day_id=tr_day.id,
    )

    text = f"<b>{user.first_name} {user.last_name} ‚Äî {user.phone_number}</b>\n" \
           f"–•–æ—á–µ—Ç –ø—Ä–∏–π—Ç–∏ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ <b>{day_dt} ({day_of_week}) </b>" \
           f" –≤ <b>{start_time} ‚Äî {end_time}</b>\n" \
           f"<b>–†–∞–∑—Ä–µ—à–∏—Ç—å?</b>"

    clear_broadcast_messages(
        user_ids=list(admins.values_list('id', flat=True)),
        message=text,
        reply_markup=markup,
        tg_token=ADMIN_TELEGRAM_TOKEN
    )


def select_precise_group_lesson_time(update, context):
    """
    –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–±—Ä–∞–ª —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏,
    –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ—É –æ–± —ç—Ç–æ–º –¥–Ω–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏ –Ω–∞–∑–∞–¥
    :param bot:
    :param update:
    :param user:
    :return:
    """

    tr_day_id = update.callback_query.data[len(SELECT_PRECISE_GROUP_TIME):]
    tr_day = GroupTrainingDay.objects.select_related('group').get(id=tr_day_id)

    time_tlg, _, _, date_tlg, day_of_week, _, _ = get_time_info_from_tr_day(tr_day)
    # —Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
    players = get_actual_players_without_absent(tr_day)
    n_free_places = tr_day.group.max_players - players.count()
    all_players = players.values('first_name', 'last_name')
    text = ''
    if n_free_places <= 0 and tr_day.group.max_players < 6 and tr_day.group.available_for_additional_lessons:
        text = f'‚ö†Ô∏èATTENTION‚ö†Ô∏è\n' \
               f'<b>–≠—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –ø–ª–∞—Ç–Ω–æ–µ!</b>\n\n'

    all_players = '\n'.join((f"{x['first_name']} {x['last_name']}" for x in all_players))
    text += f'{tr_day.group.name} -- {GROUP_LEVEL_DICT[tr_day.group.level]}\n' \
            f'{DATE_INFO.format(date_tlg, day_of_week, time_tlg)}' \
            f'üë•–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ:\n{all_players}\n\n' \
            f'–°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞: {n_free_places if n_free_places > 0 else "–µ—Å—Ç—å –∑–∞ –¥–µ–Ω—å–≥–∏"}'

    markup = take_lesson_back_keyboard(
        tr_day_id=tr_day_id,
        year=tr_day.date.year,
        month=tr_day.date.month,
        day=tr_day.date.day,
    )

    bot_edit_message(context.bot, text, update, markup)


def confirm_group_lesson(update, context):
    tr_day_id = update.callback_query.data[len(CONFIRM_GROUP_LESSON):]
    tr_day = GroupTrainingDay.objects.select_related('group').get(id=tr_day_id)
    user, _ = User.get_user_and_created(update, context)

    time_tlg, start_time_tlg, end_time_tlg, date_tlg, day_of_week, start_time, end_time = get_time_info_from_tr_day(
        tr_day)
    n_free_places = tr_day.group.max_players - tr_day.visitors.distinct().count() + \
                    tr_day.absent.distinct().count() - tr_day.group.users.distinct().count()
    admit_message_text = ''

    if n_free_places > 0:
        tr_day.visitors.add(user)
        text = f'–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n' \
               f'{DATE_INFO.format(date_tlg, day_of_week, time_tlg)}'
        markup = None

        if user.bonus_lesson > 0 and user.status == User.STATUS_TRAINING:
            admit_message_text = f'{user.first_name} {user.last_name} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞ –æ—Ç—ã–≥—Ä—ã—à.\n' \
                                 f'{DATE_INFO.format(date_tlg, day_of_week, time_tlg)}'
            user.bonus_lesson -= 1
            user.save()
        else:
            admit_message_text = f'‚ö†Ô∏èATTENTION‚ö†Ô∏è\n' \
                                 f'{user.first_name} {user.last_name} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ <b>{date_tlg} ({day_of_week})</b>\n' \
                                 f'–í—Ä–µ–º—è: <b>{time_tlg}</b>\n' \
                                 f'<b>–ù–µ –∑–∞ —Å—á–µ—Ç –æ—Ç—ã–≥—Ä—ã—à–µ–π, –Ω–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å —Å –Ω–µ–≥–æ –¥–µ–Ω—é–∂–∫—É.</b>'
    else:
        if tr_day.group.available_for_additional_lessons and tr_day.group.max_players < 6:
            tarif = TARIF_ARBITRARY if user.status == User.STATUS_ARBITRARY else TARIF_GROUP
            if user.bonus_lesson == 0:
                tr_day.pay_visitors.add(user)
                text = f'–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ <b>{date_tlg} ({day_of_week})</b>\n' \
                       f'–í—Ä–µ–º—è: <b>{time_tlg}</b>\n' \
                       f'‚ö†Ô∏èATTENTION‚ö†Ô∏è\n' \
                       f'–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å <b>{tarif}‚ÇΩ</b>'
                admit_message_text = f'‚ö†Ô∏èATTENTION‚ö†Ô∏è\n' \
                                     f'{user.first_name} {user.last_name} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ <b>{date_tlg} ({day_of_week})</b>\n' \
                                     f'–í—Ä–µ–º—è: <b>{time_tlg}</b>\n' \
                                     f'<b>–ù–µ –∑–∞ —Å—á–µ—Ç –æ—Ç—ã–≥—Ä—ã—à–µ–π, –Ω–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å —Å –Ω–µ–≥–æ {tarif}‚ÇΩ.</b>'
                markup = None
            else:
                text = "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã"
                markup = choose_type_of_payment_for_group_lesson_keyboard(
                    payment_add_lesson=TARIF_PAYMENT_ADD_LESSON,
                    tr_day_id=tr_day_id,
                    tarif=tarif,
                )
        else:
            text = '–£–ø—Å, –ø–æ—Ö–æ–∂–µ —É–∂–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ.'
            markup = back_to_group_times_when_no_left_keyboard(
                year=tr_day.date.year,
                month=tr_day.date.month,
                day=tr_day.date.day
            )

    bot_edit_message(context.bot, text, update, markup)

    if admit_message_text:
        admins = User.objects.filter(is_staff=True, is_blocked=False)

        clear_broadcast_messages(
            user_ids=list(admins.values_list('id', flat=True)),
            message=admit_message_text,
            reply_markup=None,
            tg_token=ADMIN_TELEGRAM_TOKEN
        )


def choose_type_of_payment_for_pay_visiting(update, context):
    payment_choice, tr_day_id = update.callback_query.data[len(PAYMENT_VISITING):].split('|')
    tr_day = GroupTrainingDay.objects.get(id=tr_day_id)
    user, _ = User.get_user_and_created(update, context)

    time_tlg, _, _, date_tlg, day_of_week, _, _ = get_time_info_from_tr_day(tr_day)
    text, admin_text = '', ''
    if payment_choice == PAYMENT_BONUS:
        user.bonus_lesson -= 1
        user.save()

        tr_day.pay_bonus_visitors.add(user)
        text = f'–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ <b>{date_tlg} ({day_of_week})</b>\n' \
               f'–í—Ä–µ–º—è: <b>{time_tlg}</b>\n' \
               f'‚ö†Ô∏èATTENTION‚ö†Ô∏è\n' \
               f'–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å <b>{TARIF_PAYMENT_ADD_LESSON}‚ÇΩ</b>'

        admin_text = f'‚ö†Ô∏èATTENTION‚ö†Ô∏è\n' \
                     f'{user.first_name} {user.last_name} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ <b>{date_tlg} ({day_of_week})</b>\n' \
                     f'–í—Ä–µ–º—è: <b>{time_tlg}</b>\n' \
                     f'<b>–ó–∞ —Å—á–µ—Ç –ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç—ã–≥—Ä–µ—à–µ–π, –Ω–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å —Å –Ω–µ–≥–æ {TARIF_PAYMENT_ADD_LESSON}‚ÇΩ.</b>'

    elif payment_choice == PAYMENT_MONEY:
        tr_day.pay_visitors.add(user)
        tarif = TARIF_ARBITRARY if user.status == User.STATUS_ARBITRARY else TARIF_GROUP

        text = f'–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ <b>{date_tlg} ({day_of_week})</b>\n' \
               f'–í—Ä–µ–º—è: <b>{time_tlg}</b>\n' \
               f'‚ö†Ô∏èATTENTION‚ö†Ô∏è\n' \
               f'–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å <b>{tarif}‚ÇΩ</b>'

        admin_text = f'‚ö†Ô∏èATTENTION‚ö†Ô∏è\n' \
                     f'{user.first_name} {user.last_name} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ <b>{date_tlg} ({day_of_week})</b>\n' \
                     f'–í—Ä–µ–º—è: <b>{time_tlg}</b>\n' \
                     f'<b>–í –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å —Å –Ω–µ–≥–æ {tarif}‚ÇΩ.</b>'

    bot_edit_message(context.bot, text, update)

    admins = User.objects.filter(is_staff=True, is_blocked=False)

    clear_broadcast_messages(
        user_ids=list(admins.values_list('id', flat=True)),
        message=admin_text,
        reply_markup=None,
        tg_token=ADMIN_TELEGRAM_TOKEN
    )